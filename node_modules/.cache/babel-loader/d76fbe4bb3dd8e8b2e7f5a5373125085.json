{"ast":null,"code":"var _jsxFileName = \"/Users/a.ponkrashenkova/Documents/GitHub/WeatherApp/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport DadataSuggestions from 'react-dadata-suggestions';\nimport \"react-dadata-suggestions/dist/styles.css\";\nconst dadataToken = '9357f46cef73bd355912567b08e7ecd06f531745'; // const PLACES = [\n//   { name: \"Москва\", zip: \"105005\" },\n//   { name: \"Санкт-Петербург\", zip: \"187015\" },\n//   { name: \"Сочи\", zip: \"354000\" },\n//   { name: \"Пятигорск\", zip: \"357361\" }\n// ]\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n\n  componentDidMount() {\n    const geoname = this.props.cityId;\n    const URL = \"api.openweathermap.org/data/2.5/weather?id=\" + geoname + \"&appid=2fe9657dc864de269a18a030c1815838\";\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({\n        weatherData: json\n      });\n    });\n    console.log('вот тут должен быть объект с подсказками ' + geoname);\n  } // render() {\n  //   const weatherData = this.state.weatherData;\n  //\n  //   if (!weatherData) return <div>Загрузка...</div>;\n  //   const weather = weatherData.weather;\n  //   const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n  //\n  //   return (\n  //     <div>\n  //       <h1>\n  //         {weather.main} in {weatherData.name}\n  //         <img src={iconUrl} alt={weatherData.description} />\n  //       </h1>\n  //       <p>Current: {weatherData.main.temp}°</p>\n  //       <p>High: {weatherData.main.temp_max}°</p>\n  //       <p>Low: {weatherData.main.temp_min}°</p>\n  //       <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\n  //     </div>\n  //   );\n  // }\n  //  render() {\n  //   return (\n  //     <div>\n  //       Child component\n  //       <button onClick={() => this.props.update('child')}>\n  //         CLICK\n  //       </button>\n  //     </div>\n  //   );\n  // }\n\n\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      suggestion: []\n    };\n    this.state = {\n      data: 'Initial data...'\n    };\n    this.updateState = this.updateState.bind(this);\n  }\n\n  updateState(who) {\n    this.setState({\n      data: `Data updated from ${who}`\n    });\n  }\n\n  // render() {\n  //   return (\n  //     <div className=\"weather-body\">\n  //       <DadataSuggestions\n  //         className=\"dadata-body\"\n  //         token={ dadataToken }\n  //         onSelect={ (suggestion) => console.log(suggestion.data.geoname_id) }\n  //         // dataSuggestions={this.dataSuggestions}\n  //       />\n  //       <WeatherDisplay/>\n  //     </div>\n  //   );\n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 6\n      }\n    }, \"Parent: \", this.state.data, /*#__PURE__*/React.createElement(WeatherDisplay, {\n      update: this.updateState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 8\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a.ponkrashenkova/Documents/GitHub/WeatherApp/src/App.js"],"names":["React","Component","DadataSuggestions","dadataToken","WeatherDisplay","constructor","state","weatherData","componentDidMount","geoname","props","cityId","URL","fetch","then","res","json","setState","console","log","App","suggestion","data","updateState","bind","who","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAO,0CAAP;AAEA,MAAMC,WAAW,GAAG,0CAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AACrCI,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWC,MAA3B;AACA,UAAMC,GAAG,GAAG,gDAAgDH,OAAhD,GAA0D,yCAAtE;AACAI,IAAAA,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EAAmCF,IAAnC,CAAwCE,IAAI,IAAI;AAC9C,WAAKC,QAAL,CAAc;AAAEV,QAAAA,WAAW,EAAES;AAAf,OAAd;AACD,KAFD;AAGAE,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8CV,OAA1D;AACD,GAdoC,CAgBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7CsC;;AAiDvC,MAAMW,GAAN,SAAkBnB,SAAlB,CAA4B;AAE5BI,EAAAA,WAAW,CAACK,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAYnBJ,KAZmB,GAYX;AACNe,MAAAA,UAAU,EAAE;AADN,KAZW;AAEjB,SAAKf,KAAL,GAAa;AACXgB,MAAAA,IAAI,EAAE;AADK,KAAb;AAGA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,CAACE,GAAD,EAAM;AACf,SAAKR,QAAL,CAAc;AAACK,MAAAA,IAAI,EAAG,qBAAoBG,GAAI;AAAhC,KAAd;AACD;;AAMC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACR,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACW,KAAKpB,KAAL,CAAWgB,IADtB,eAEE,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAE,KAAKC,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAvC0B;;AA0C5B,eAAeH,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DadataSuggestions from 'react-dadata-suggestions';\nimport \"react-dadata-suggestions/dist/styles.css\";\n\nconst dadataToken = '9357f46cef73bd355912567b08e7ecd06f531745';\n\n// const PLACES = [\n//   { name: \"Москва\", zip: \"105005\" },\n//   { name: \"Санкт-Петербург\", zip: \"187015\" },\n//   { name: \"Сочи\", zip: \"354000\" },\n//   { name: \"Пятигорск\", zip: \"357361\" }\n// ]\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n  componentDidMount() {\n    const geoname = this.props.cityId;\n    const URL = \"api.openweathermap.org/data/2.5/weather?id=\" + geoname + \"&appid=2fe9657dc864de269a18a030c1815838\";\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({ weatherData: json });\n    });\n    console.log('вот тут должен быть объект с подсказками ' + geoname)\n  }\n\n  // render() {\n  //   const weatherData = this.state.weatherData;\n  //\n  //   if (!weatherData) return <div>Загрузка...</div>;\n  //   const weather = weatherData.weather;\n  //   const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n  //\n  //   return (\n  //     <div>\n  //       <h1>\n  //         {weather.main} in {weatherData.name}\n  //         <img src={iconUrl} alt={weatherData.description} />\n  //       </h1>\n  //       <p>Current: {weatherData.main.temp}°</p>\n  //       <p>High: {weatherData.main.temp_max}°</p>\n  //       <p>Low: {weatherData.main.temp_min}°</p>\n  //       <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\n  //     </div>\n  //   );\n  // }\n //  render() {\n //   return (\n //     <div>\n //       Child component\n //       <button onClick={() => this.props.update('child')}>\n //         CLICK\n //       </button>\n //     </div>\n //   );\n // }\n}\n\n\nclass App extends Component {\n\nconstructor(props) {\n  super(props)\n  this.state = {\n    data: 'Initial data...'\n  }\n  this.updateState = this.updateState.bind(this);\n}\n\nupdateState(who) {\n  this.setState({data: `Data updated from ${who}`})\n}\n\nstate = {\n  suggestion: []\n};\n\n  // render() {\n  //   return (\n  //     <div className=\"weather-body\">\n  //       <DadataSuggestions\n  //         className=\"dadata-body\"\n  //         token={ dadataToken }\n  //         onSelect={ (suggestion) => console.log(suggestion.data.geoname_id) }\n  //         // dataSuggestions={this.dataSuggestions}\n  //       />\n  //       <WeatherDisplay/>\n  //     </div>\n  //   );\n  // }\n\n  render() {\n   return (\n     <div>\n       Parent: {this.state.data}\n       <WeatherDisplay update={this.updateState}/>\n     </div>\n   )\n }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}