{"ast":null,"code":"var _jsxFileName = \"/Users/a.ponkrashenkova/Documents/GitHub/WeatherApp/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport DadataSuggestions from 'react-dadata-suggestions';\nimport \"react-dadata-suggestions/dist/styles.css\";\nconst dadataToken = '9357f46cef73bd355912567b08e7ecd06f531745';\nconst PLACES = [{\n  name: \"Москва\",\n  zip: \"105005\"\n}, {\n  name: \"Санкт-Петербург\",\n  zip: \"187015\"\n}, {\n  name: \"Сочи\",\n  zip: \"354000\"\n}, {\n  name: \"Пятигорск\",\n  zip: \"357361\"\n}];\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n\n  componentDidMount() {\n    const geoname = this.props.cityId;\n    const zip = this.props.zip; //const URL = \"api.openweathermap.org/data/2.5/weather?id=\" + geoname + \"&appid=2fe9657dc864de269a18a030c1815838\";\n\n    const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + zip + \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial\";\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({\n        weatherData: json\n      });\n    });\n    console.log('вот тут должен быть объект с подсказками ' + geoname);\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n    if (!weatherData) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 30\n      }\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\");\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, weather.main, \" in \", weatherData.name, /*#__PURE__*/React.createElement(\"img\", {\n      src: iconUrl,\n      alt: weatherData.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Current: \", weatherData.main.temp, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"High: \", weatherData.main.temp_max, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Low: \", weatherData.main.temp_min, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Wind Speed: \", weatherData.wind.speed, \" mi/hr\"));\n  }\n\n}\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     suggestion: []\n  //   }\n  // }\n  constructor() {\n    super();\n    this.state = {\n      activePlace: 0\n    };\n  }\n\n  render() {\n    const activePlace = this.state.activePlace;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, PLACES.map((place, index) => /*#__PURE__*/React.createElement(DadataSuggestions, {\n      className: \"dadata-body\",\n      token: dadataToken,\n      onSelect: suggestion => console.log(suggestion.data.geoname_id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(DadataSuggestions, {\n      className: \"dadata-body\",\n      token: dadataToken,\n      onSelect: suggestion => console.log(suggestion.data.geoname_id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WeatherDisplay, {\n      key: activePlace,\n      zip: PLACES[activePlace].zip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a.ponkrashenkova/Documents/GitHub/WeatherApp/src/App.js"],"names":["React","Component","DadataSuggestions","dadataToken","PLACES","name","zip","WeatherDisplay","constructor","state","weatherData","componentDidMount","geoname","props","cityId","URL","fetch","then","res","json","setState","console","log","render","weather","iconUrl","icon","main","description","temp","temp_max","temp_min","wind","speed","App","activePlace","map","place","index","suggestion","data","geoname_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAO,0CAAP;AAEA,MAAMC,WAAW,GAAG,0CAApB;AAEA,MAAMC,MAAM,GAAG,CACb;AAAEC,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,GAAG,EAAE;AAAvB,CADa,EAEb;AAAED,EAAAA,IAAI,EAAE,iBAAR;AAA2BC,EAAAA,GAAG,EAAE;AAAhC,CAFa,EAGb;AAAED,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,GAAG,EAAE;AAArB,CAHa,EAIb;AAAED,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CAJa,CAAf;;AAOA,MAAMC,cAAN,SAA6BN,SAA7B,CAAuC;AACrCO,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWC,MAA3B;AACA,UAAMR,GAAG,GAAG,KAAKO,KAAL,CAAWP,GAAvB,CAFkB,CAGlB;;AACA,UAAMS,GAAG,GAAG,sDACVT,GADU,GAEV,wDAFF;AAGAU,IAAAA,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EAAmCF,IAAnC,CAAwCE,IAAI,IAAI;AAC9C,WAAKC,QAAL,CAAc;AAAEV,QAAAA,WAAW,EAAES;AAAf,OAAd;AACD,KAFD;AAGAE,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8CV,OAA1D;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACP,UAAMb,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA/B;AAEA,QAAI,CAACA,WAAL,EAAkB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAAP;AAClB,UAAMc,OAAO,GAAGd,WAAW,CAACc,OAAZ,CAAoB,CAApB,CAAhB;AACA,UAAMC,OAAO,GAAG,qCAAqCD,OAAO,CAACE,IAA7C,GAAoD,MAApE;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,OAAO,CAACG,IADX,UACqBjB,WAAW,CAACL,IADjC,eAEE;AAAK,MAAA,GAAG,EAAEoB,OAAV;AAAmB,MAAA,GAAG,EAAEf,WAAW,CAACkB,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAalB,WAAW,CAACiB,IAAZ,CAAiBE,IAA9B,SALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAUnB,WAAW,CAACiB,IAAZ,CAAiBG,QAA3B,SANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAASpB,WAAW,CAACiB,IAAZ,CAAiBI,QAA1B,SAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAgBrB,WAAW,CAACsB,IAAZ,CAAiBC,KAAjC,WARF,CADF;AAYD;;AAvCoC;;AA2CvC,MAAMC,GAAN,SAAkBjC,SAAlB,CAA4B;AAE5B;AACA;AACA;AACA;AACA;AACA;AACAO,EAAAA,WAAW,GAAG;AACX;AACA,SAAKC,KAAL,GAAa;AACX0B,MAAAA,WAAW,EAAE;AADF,KAAb;AAGD;;AAGAZ,EAAAA,MAAM,GAAG;AACP,UAAMY,WAAW,GAAG,KAAK1B,KAAL,CAAW0B,WAA/B;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC/B,MAAM,CAACgC,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,kBACV,oBAAC,iBAAD;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,KAAK,EAAGnC,WAFV;AAGE,MAAA,QAAQ,EAAIoC,UAAD,IAAgBlB,OAAO,CAACC,GAAR,CAAYiB,UAAU,CAACC,IAAX,CAAgBC,UAA5B,CAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,eAQE,oBAAC,iBAAD;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,KAAK,EAAGtC,WAFV;AAGE,MAAA,QAAQ,EAAIoC,UAAD,IAAgBlB,OAAO,CAACC,GAAR,CAAYiB,UAAU,CAACC,IAAX,CAAgBC,UAA5B,CAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,eAaE,oBAAC,cAAD;AACE,MAAA,GAAG,EAAEN,WADP;AAEE,MAAA,GAAG,EAAE/B,MAAM,CAAC+B,WAAD,CAAN,CAAoB7B,GAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAoBD;;AAtCyB;;AAyC5B,eAAe4B,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DadataSuggestions from 'react-dadata-suggestions';\nimport \"react-dadata-suggestions/dist/styles.css\";\n\nconst dadataToken = '9357f46cef73bd355912567b08e7ecd06f531745';\n\nconst PLACES = [\n  { name: \"Москва\", zip: \"105005\" },\n  { name: \"Санкт-Петербург\", zip: \"187015\" },\n  { name: \"Сочи\", zip: \"354000\" },\n  { name: \"Пятигорск\", zip: \"357361\" }\n]\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n  componentDidMount() {\n    const geoname = this.props.cityId;\n    const zip = this.props.zip;\n    //const URL = \"api.openweathermap.org/data/2.5/weather?id=\" + geoname + \"&appid=2fe9657dc864de269a18a030c1815838\";\n    const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" +\n      zip +\n      \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial\";\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({ weatherData: json });\n    });\n    console.log('вот тут должен быть объект с подсказками ' + geoname)\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n\n    if (!weatherData) return <div>Загрузка...</div>;\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n\n    return (\n      <div>\n        <h1>\n          {weather.main} in {weatherData.name}\n          <img src={iconUrl} alt={weatherData.description} />\n        </h1>\n        <p>Current: {weatherData.main.temp}°</p>\n        <p>High: {weatherData.main.temp_max}°</p>\n        <p>Low: {weatherData.main.temp_min}°</p>\n        <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\n      </div>\n    );\n  }\n}\n\n\nclass App extends Component {\n\n// constructor(props) {\n//   super(props)\n//   this.state = {\n//     suggestion: []\n//   }\n// }\nconstructor() {\n   super();\n   this.state = {\n     activePlace: 0,\n   };\n }\n\n\n  render() {\n    const activePlace = this.state.activePlace;\n    return (\n      <div className=\"weather-body\">\n      {PLACES.map((place, index) => (\n        <DadataSuggestions\n          className=\"dadata-body\"\n          token={ dadataToken }\n          onSelect={ (suggestion) => console.log(suggestion.data.geoname_id) }\n        />\n        ))}\n        <DadataSuggestions\n          className=\"dadata-body\"\n          token={ dadataToken }\n          onSelect={ (suggestion) => console.log(suggestion.data.geoname_id) }\n        />\n        <WeatherDisplay\n          key={activePlace}\n          zip={PLACES[activePlace].zip}\n           />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}