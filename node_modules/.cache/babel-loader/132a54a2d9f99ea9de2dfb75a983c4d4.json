{"ast":null,"code":"var _jsxFileName = \"/Users/a.ponkrashenkova/Documents/GitHub/WeatherApp/src/App.js\";\nimport React, { Component, useState } from \"react\";\nimport \"./App.css\";\nimport { AddressSuggestions } from 'react-dadata';\nimport 'react-dadata/dist/react-dadata.css';\nconst PLACES = [{\n  name: \"Москва\",\n  zip: \"105005\"\n}, {\n  name: \"Санкт-Петербург\",\n  zip: \"187015\"\n}, {\n  name: \"Сочи\",\n  zip: \"354000\"\n}, {\n  name: \"Пятигорск\",\n  zip: \"357361\"\n}];\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n\n  componentDidMount() {\n    const zip = this.props.zip;\n    const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + zip + \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial\";\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({\n        weatherData: json\n      });\n    });\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n    if (!weatherData) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 30\n      }\n    }, \"Loading...\");\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, weather.main, \" in \", weatherData.name, /*#__PURE__*/React.createElement(\"img\", {\n      src: iconUrl,\n      alt: weatherData.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Current: \", weatherData.main.temp, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"High: \", weatherData.main.temp_max, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Low: \", weatherData.main.temp_min, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Wind Speed: \", weatherData.wind.speed, \" mi/hr\"));\n  }\n\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activePlace: 0\n    };\n  }\n\n  render() {\n    const activePlace = this.state.activePlace; //const [value, setValue] = useState();\n\n    var token = \"9357f46cef73bd355912567b08e7ecd06f531745\",\n        type = \"ADDRESS\",\n        $street = $(\"#street\"); // улица\n\n    $street.suggestions({\n      token: token,\n      type: type,\n      hint: false,\n      constraints: {\n        label: '',\n        // ограничиваем поиск Москвой\n        locations: {\n          region: \"Москва\"\n        },\n        deletable: true\n      },\n      formatSelected: function (suggestion) {\n        var addressValue = makeAddressString(suggestion.data);\n        return addressValue;\n      },\n      formatResult: function (value, currentValue, suggestion) {\n        var addressValue = makeAddressString(suggestion.data);\n        suggestion.value = addressValue;\n        return addressValue;\n      },\n      bounds: \"street house\"\n    });\n    /**\n     * Объединяет элементы массива через разделитель. При этом игнорирует пустые элементы.\n     */\n\n    function join(arr\n    /*, separator */\n    ) {\n      var separator = arguments.length > 1 ? arguments[1] : \", \";\n      return arr.filter(function (n) {\n        return n;\n      }).join(separator);\n    }\n\n    function makeAddressString(address) {\n      return join([join([address.street_type, address.street], \" \"), join([address.house_type, address.house, address.block_type, address.block], \" \")]);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, PLACES.map((place, index) => /*#__PURE__*/React.createElement(\"button\", {\n      className: \"city-btn\",\n      key: index,\n      onClick: () => {\n        this.setState({\n          activePlace: index\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, place.name)), /*#__PURE__*/React.createElement(\"section\", {\n      class: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, \"\\u0413\\u0440\\u0430\\u043D\\u0443\\u043B\\u044F\\u0440\\u043D\\u044B\\u0435 \\u043F\\u043E\\u0434\\u0441\\u043A\\u0430\\u0437\\u043A\\u0438 \\u043F\\u043E \\u0430\\u0434\\u0440\\u0435\\u0441\\u0443 (\\u0433\\u043E\\u0440\\u043E\\u0434, \\u0443\\u043B\\u0438\\u0446\\u0430, \\u0434\\u043E\\u043C)\"), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"street\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, \"\\u0410\\u0434\\u0440\\u0435\\u0441\\u0441:\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"street\",\n      name: \"street\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 46\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    })), \"\\u044B\", /*#__PURE__*/React.createElement(WeatherDisplay, {\n      key: activePlace,\n      zip: PLACES[activePlace].zip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a.ponkrashenkova/Documents/GitHub/WeatherApp/src/App.js"],"names":["React","Component","useState","AddressSuggestions","PLACES","name","zip","WeatherDisplay","constructor","state","weatherData","componentDidMount","props","URL","fetch","then","res","json","setState","render","weather","iconUrl","icon","main","description","temp","temp_max","temp_min","wind","speed","App","activePlace","token","type","$street","$","suggestions","hint","constraints","label","locations","region","deletable","formatSelected","suggestion","addressValue","makeAddressString","data","formatResult","value","currentValue","bounds","join","arr","separator","arguments","length","filter","n","address","street_type","street","house_type","house","block_type","block","map","place","index"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport \"./App.css\";\nimport { AddressSuggestions } from 'react-dadata';\nimport 'react-dadata/dist/react-dadata.css';\n\nconst PLACES = [\n  { name: \"Москва\", zip: \"105005\" },\n  { name: \"Санкт-Петербург\", zip: \"187015\" },\n  { name: \"Сочи\", zip: \"354000\" },\n  { name: \"Пятигорск\", zip: \"357361\" }\n]\n\n\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n  componentDidMount() {\n    const zip = this.props.zip;\n    const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" +\n      zip +\n      \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial\";\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({ weatherData: json });\n    });\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n\n    if (!weatherData) return <div>Loading...</div>;\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n\n    return (\n      <div>\n        <h1>\n          {weather.main} in {weatherData.name}\n          <img src={iconUrl} alt={weatherData.description} />\n        </h1>\n        <p>Current: {weatherData.main.temp}°</p>\n        <p>High: {weatherData.main.temp_max}°</p>\n        <p>Low: {weatherData.main.temp_min}°</p>\n        <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n\n  constructor() {\n   super();\n   this.state = {\n     activePlace: 0,\n   };\n }\n\n  render() {\n    const activePlace = this.state.activePlace;\n    //const [value, setValue] = useState();\n    var\ntoken = \"9357f46cef73bd355912567b08e7ecd06f531745\",\n    type  = \"ADDRESS\",\n    $street = $(\"#street\");\n\n\n// улица\n$street.suggestions({\n  token: token,\n  type: type,\n  hint: false,\n  constraints: {\n    label: '',\n    // ограничиваем поиск Москвой\n    locations: { region: \"Москва\" },\n    deletable: true\n  },\n  formatSelected: function(suggestion){\n    var addressValue = makeAddressString(suggestion.data);\n\n    return addressValue;\n  },\n  formatResult: function(value, currentValue, suggestion) {\n    var addressValue = makeAddressString(suggestion.data);\n    suggestion.value = addressValue;\n\n    return addressValue;\n  },\n  bounds: \"street house\"\n});\n/**\n * Объединяет элементы массива через разделитель. При этом игнорирует пустые элементы.\n */\nfunction join(arr /*, separator */) {\n  var separator = arguments.length > 1 ? arguments[1] : \", \";\n  return arr.filter(function(n){return n}).join(separator);\n}\nfunction makeAddressString(address){\n  return join([\n    join([address.street_type, address.street], \" \"),\n    join([address.house_type, address.house,\n          address.block_type, address.block], \" \")\n    ]);\n}\n\n    return (\n      <div className=\"weather-body\">\n        {PLACES.map((place, index) => (\n          <button\n            className=\"city-btn\"\n            key={index}\n            onClick={() => {\n              this.setState({ activePlace: index });\n            }}\n          >\n            {place.name}\n          </button>\n        ))}\n        <section class=\"container\">\n          <h1>Гранулярные подсказки по адресу (город, улица, дом)</h1>\n\n          <label for=\"street\">Адресс:</label><input id=\"street\" name=\"street\" type=\"text\" />\n          <br/>\n        </section>ы\n        <WeatherDisplay\n          key={activePlace}\n          zip={PLACES[activePlace].zip}\n           />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}